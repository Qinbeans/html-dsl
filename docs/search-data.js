window.Gleam.initSearch([{"doc":"html_dsl","title":"html_dsl","content":"# html_dsl\n\n[![Hex Docs](https://img.shields.io/badge/hex-docs-ffaff3)](https://qinbeans.github.io/html-dsl/)\n[![test](https://github.com/Qinbeans/html-dsl/actions/workflows/test.yml/badge.svg)](https://github.com/Qinbeans/html-dsl/actions/workflows/test.yml)\n\nA fun way to create HTML in Gleam.\n\n## Premise\n\nI wanted a simple framework to build HTML and I saw a way forward with strings.\n\nI thought that Gleam had a very unique type system in which I could wrap strings around a named type like `Html` or `Head`. The way I implemented it does restrict general reactivity through Gleam itself, but I never thought making this a standalone framework as an option. The idea was to combine this with existing frontend libraries like HTMX to add that touch of reactivity.\n\n## Going forward\n\nI&#39;m not sure what else to expand except implementing more existing HTML elements.\n\n## Examples\n\n```gleam\nimport html_dsl/types/html.{Html, Attribute, head, style, script, body, title, charset, meta, button}\nimport html_dsl/types/id.{Id}\nimport html_dsl/types/class.{Class}\n// If you&#39;re familiar with HTML, this might seem pretty standalone\nfn main() {\n  let my_doc = Html(\n    &quot;en&quot;, // States the locale\n    head([\n      title(&quot;My doc&quot;),\n      charset(&quot;utf-8&quot;),\n      meta(&quot;description&quot;,&quot;This is my doc&quot;),\n      meta(&quot;viewport&quot;,&quot;width=device-width, initial-scale=1&quot;),\n      style(&quot;https://cdn.tailwindcss.com&quot;),\n      script(&quot;https://unpkg.com/htmx.org@1.9.11&quot;)\n    ])\n    // Most elements are strings under the hood so we can concat them\n    &lt;&gt; body(\n        Id(&quot;main-content&quot;), // This declares we do not need an id\n        Class(&quot;text-white&quot;),\n        [], // Have no custom attributes\n        button(\n          id.Nil,\n          class.Nil,\n          [\n            Attribute(&quot;hx-trigger&quot;, &quot;click&quot;),\n            Attribute(&quot;hx-get&quot;, &quot;/clicked&quot;),\n            Attribute(&quot;hx-boost&quot;, &quot;true&quot;),\n            Attribute(&quot;target&quot;, &quot;#main-content&quot;)\n          ],\n          &quot;Happy Days&quot;\n        )\n      )\n  )\n  // We can access the document as a string\n  let _ = html.html_to_string(my_doc)\n  // or through the pipe operator\n  let _ = my_doc\n    |&gt; html.html_to_string()\n}\n```\nSo why use strings to build each element? Ultimately everything is parsed into a string so I wanted to get straight to the point with little to no intermediate step. Don&#39;t get me wrong, I still have intermediate&#39;s here and there, but that&#39;s more for explicitness. It prevents bad [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) from being written.\n\n## Development\n\n```sh\n./dev.sh run   # Run the project\n./dev.sh test  # Run the tests\n./dev.sh docs  # Generate the documentation\n./dev.sh build # Build the project\n```\n","url":"index.html"},{"doc":"html_dsl/utils/check","title":"illegal_string_check","content":"pub fn illegal_string_check(str: String) -&gt; String\n Checks a given string for illegal characters and replaces them with their HTML entity\nSynonyms:\nhtml_dsl/utils/check.illegal_string_check\nhtml_dsl/utils/check illegal_string_check","url":"html_dsl/utils/check.html#illegal_string_check"},{"doc":"html_dsl/utils/check","title":"html_dsl/utils/check","content":"","url":"html_dsl/utils/check.html"},{"doc":"html_dsl/types/attribute","title":"Attribute","content":"pub opaque type Attribute\n Similar to a pair, but uniquely named\n\nSynonyms:\nhtml_dsl/types/attribute.Attribute\nhtml_dsl/types/attribute Attribute","url":"html_dsl/types/attribute.html#Attribute"},{"doc":"html_dsl/types/attribute","title":"add","content":"pub fn add(\n  root: Attribute,\n  key: String,\n  value: String,\n) -&gt; Attribute\n This function is used to create a ListItem\n - `@param` root: The root attribute\n - `@param` key: The key of the attribute\n - `@param` value: The value of the attribute\n - `@returns`: A ListItem\nSynonyms:\nhtml_dsl/types/attribute.add\nhtml_dsl/types/attribute add","url":"html_dsl/types/attribute.html#add"},{"doc":"html_dsl/types/attribute","title":"attribute","content":"pub fn attribute() -&gt; Attribute\n This function is used to create a ListItem\n - `@returns`: A ListItem\nSynonyms:\nhtml_dsl/types/attribute.attribute\nhtml_dsl/types/attribute attribute","url":"html_dsl/types/attribute.html#attribute"},{"doc":"html_dsl/types/attribute","title":"attribute_to_string","content":"pub fn attribute_to_string(attribute: Attribute) -&gt; String\n This function is used to create a ListItem\n  - `@param` content: The content of the list item\n  - `@returns`: A ListItem\nSynonyms:\nhtml_dsl/types/attribute.attribute_to_string\nhtml_dsl/types/attribute attribute_to_string","url":"html_dsl/types/attribute.html#attribute_to_string"},{"doc":"html_dsl/types/attribute","title":"html_dsl/types/attribute","content":"","url":"html_dsl/types/attribute.html"},{"doc":"html_dsl/types/html/head","title":"Head","content":"pub opaque type Head\n Head is a type that represents the head of an HTML document\n\nSynonyms:\nhtml_dsl/types/html/head.Head\nhtml_dsl/types/html/head Head","url":"html_dsl/types/html/head.html#Head"},{"doc":"html_dsl/types/html/head","title":"charset","content":"pub fn charset(root: Head, set: String) -&gt; Head\n This creates a string that represents a meta charset\n  - `@param` charset: the intended charset\n  - `@return`: A Head\nSynonyms:\nhtml_dsl/types/html/head.charset\nhtml_dsl/types/html/head charset","url":"html_dsl/types/html/head.html#charset"},{"doc":"html_dsl/types/html/head","title":"head","content":"pub fn head() -&gt; Head\n Starts a head context\n - `@returns`: A Head\nSynonyms:\nhtml_dsl/types/html/head.head\nhtml_dsl/types/html/head head","url":"html_dsl/types/html/head.html#head"},{"doc":"html_dsl/types/html/head","title":"head_to_string","content":"pub fn head_to_string(head: Head) -&gt; String\n This function converts a Head to a string\n  - `@param` head: The head to convert\n  - `@returns`: A string\nSynonyms:\nhtml_dsl/types/html/head.head_to_string\nhtml_dsl/types/html/head head_to_string","url":"html_dsl/types/html/head.html#head_to_string"},{"doc":"html_dsl/types/html/head","title":"link","content":"pub fn link(\n  root: Head,\n  rel: String,\n  href: String,\n  attributes: Attribute,\n) -&gt; Head\n This creates a string that represents a link element\n  - `@param` rel: The relationship of the link\n  - `@param` href: The href of the link\n  - `@param` attributes: The attributes of the link\n  - `@returns`: A Head\nSynonyms:\nhtml_dsl/types/html/head.link\nhtml_dsl/types/html/head link","url":"html_dsl/types/html/head.html#link"},{"doc":"html_dsl/types/html/head","title":"meta","content":"pub fn meta(root: Head, name: String, content: String) -&gt; Head\n This creates a string that represents a meta element\n  - `@param` name: The name of the meta\n  - `@param` content: The content of the meta\n  - `@returns`: A Head\nSynonyms:\nhtml_dsl/types/html/head.meta\nhtml_dsl/types/html/head meta","url":"html_dsl/types/html/head.html#meta"},{"doc":"html_dsl/types/html/head","title":"script","content":"pub fn script(root: Head, src: String) -&gt; Head\n This creates a string that represents a script element\n  - `@param` src: The source of the script\n  - `@returns`: A Head\nSynonyms:\nhtml_dsl/types/html/head.script\nhtml_dsl/types/html/head script","url":"html_dsl/types/html/head.html#script"},{"doc":"html_dsl/types/html/head","title":"style","content":"pub fn style(root: Head, src: String) -&gt; Head\n This creates a string that represents a special link element for stylesheets\n  - `@param` src: The source of the stylesheet\n  - `@returns`: A Head\nSynonyms:\nhtml_dsl/types/html/head.style\nhtml_dsl/types/html/head style","url":"html_dsl/types/html/head.html#style"},{"doc":"html_dsl/types/html/head","title":"title","content":"pub fn title(root: Head, content: String) -&gt; Head\n This creates a string that represents a title element\n  - `@param` content: The content of the title\n  - `@returns`: A Head\nSynonyms:\nhtml_dsl/types/html/head.title\nhtml_dsl/types/html/head title","url":"html_dsl/types/html/head.html#title"},{"doc":"html_dsl/types/html/head","title":"html_dsl/types/html/head","content":"","url":"html_dsl/types/html/head.html"},{"doc":"html_dsl/types/html","title":"Html","content":"pub opaque type Html\n Exists to prevent strings from being passed to engines\n\n Engines should require `Html` or `Component`\n\nSynonyms:\nhtml_dsl/types/html.Html\nhtml_dsl/types/html Html","url":"html_dsl/types/html.html#Html"},{"doc":"html_dsl/types/html","title":"a","content":"pub fn a(\n  id id: String,\n  class class: String,\n  href href: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an anchor element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` href: The href of the anchor\n  - `@param` attributes: The attributes of the element\n  - `@param` inner: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.a\nhtml_dsl/types/html a","url":"html_dsl/types/html.html#a"},{"doc":"html_dsl/types/html","title":"article","content":"pub fn article(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an article element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.article\nhtml_dsl/types/html article","url":"html_dsl/types/html.html#article"},{"doc":"html_dsl/types/html","title":"aside","content":"pub fn aside(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an aside element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.aside\nhtml_dsl/types/html aside","url":"html_dsl/types/html.html#aside"},{"doc":"html_dsl/types/html","title":"body","content":"pub fn body(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents the body of an HTML document\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.body\nhtml_dsl/types/html body","url":"html_dsl/types/html.html#body"},{"doc":"html_dsl/types/html","title":"br","content":"pub fn br() -&gt; String\n This creates a string that represents a break element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.br\nhtml_dsl/types/html br","url":"html_dsl/types/html.html#br"},{"doc":"html_dsl/types/html","title":"button","content":"pub fn button(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a button element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.button\nhtml_dsl/types/html button","url":"html_dsl/types/html.html#button"},{"doc":"html_dsl/types/html","title":"component","content":"pub fn component(content: String) -&gt; Html\n This creates a string that represents a component\n  - `@param` content: The content of the component\n  - `@returns`: A Component\nSynonyms:\nhtml_dsl/types/html.component\nhtml_dsl/types/html component","url":"html_dsl/types/html.html#component"},{"doc":"html_dsl/types/html","title":"div","content":"pub fn div(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a div element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` inner: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.div\nhtml_dsl/types/html div","url":"html_dsl/types/html.html#div"},{"doc":"html_dsl/types/html","title":"footer","content":"pub fn footer(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a footer element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.footer\nhtml_dsl/types/html footer","url":"html_dsl/types/html.html#footer"},{"doc":"html_dsl/types/html","title":"h1","content":"pub fn h1(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h1 element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` inner: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.h1\nhtml_dsl/types/html h1","url":"html_dsl/types/html.html#h1"},{"doc":"html_dsl/types/html","title":"h2","content":"pub fn h2(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h2 element\n - `@param` id: The id of the element\n - `@param` class: The class of the element\n - `@param` attributes: The attributes of the element\n - `@param` inner: The child of the element\n - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.h2\nhtml_dsl/types/html h2","url":"html_dsl/types/html.html#h2"},{"doc":"html_dsl/types/html","title":"h3","content":"pub fn h3(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h3 element\n - `@param` id: The id of the element\n - `@param` class: The class of the element\n - `@param` attributes: The attributes of the element\n - `@param` inner: The child of the element\n - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.h3\nhtml_dsl/types/html h3","url":"html_dsl/types/html.html#h3"},{"doc":"html_dsl/types/html","title":"h4","content":"pub fn h4(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h4 element\n - `@param` id: The id of the element\n - `@param` class: The class of the element\n - `@param` attributes: The attributes of the element\n - `@param` inner: The child of the element\n - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.h4\nhtml_dsl/types/html h4","url":"html_dsl/types/html.html#h4"},{"doc":"html_dsl/types/html","title":"h5","content":"pub fn h5(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h5 element\n - `@param` id: The id of the element\n - `@param` class: The class of the element\n - `@param` attributes: The attributes of the element\n - `@param` inner: The child of the element\n - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.h5\nhtml_dsl/types/html h5","url":"html_dsl/types/html.html#h5"},{"doc":"html_dsl/types/html","title":"h6","content":"pub fn h6(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h6 element\n - `@param` id: The id of the element\n - `@param` class: The class of the element\n - `@param` attributes: The attributes of the element\n - `@param` inner: The child of the element\n - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.h6\nhtml_dsl/types/html h6","url":"html_dsl/types/html.html#h6"},{"doc":"html_dsl/types/html","title":"header","content":"pub fn header(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a header element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.header\nhtml_dsl/types/html header","url":"html_dsl/types/html.html#header"},{"doc":"html_dsl/types/html","title":"hr","content":"pub fn hr() -&gt; String\n This creates a string that represents a horizontal rule element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.hr\nhtml_dsl/types/html hr","url":"html_dsl/types/html.html#hr"},{"doc":"html_dsl/types/html","title":"html","content":"pub fn html(\n  lang lang: String,\n  head head: Head,\n  body body: String,\n) -&gt; Html\n This creates a string that represents an HTML document\n  - `@param` lang: The language of the document\n  - `@param` children: The children of the document\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.html\nhtml_dsl/types/html html","url":"html_dsl/types/html.html#html"},{"doc":"html_dsl/types/html","title":"html_to_string","content":"pub fn html_to_string(html: Html) -&gt; String\n Converts Html enum to a string\nSynonyms:\nhtml_dsl/types/html.html_to_string\nhtml_dsl/types/html html_to_string","url":"html_dsl/types/html.html#html_to_string"},{"doc":"html_dsl/types/html","title":"img","content":"pub fn img(\n  id id: String,\n  class class: String,\n  src src: String,\n  alt alt: String,\n  attributes attributes: Attribute,\n) -&gt; String\n This creates a string that represents an image element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` src: The source of the image\n  - `@param` alt: The alt text of the image\n  - `@param` attributes: The attributes of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.img\nhtml_dsl/types/html img","url":"html_dsl/types/html.html#img"},{"doc":"html_dsl/types/html","title":"is_html","content":"pub fn is_html(html: Html) -&gt; Bool\n Check Html enum\n  - `@param` html: The Html enum\n  - `@returns`: True if the Html enum is Html, False if it is Component\nSynonyms:\nhtml_dsl/types/html.is_html\nhtml_dsl/types/html is_html","url":"html_dsl/types/html.html#is_html"},{"doc":"html_dsl/types/html","title":"main","content":"pub fn main(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a main element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.main\nhtml_dsl/types/html main","url":"html_dsl/types/html.html#main"},{"doc":"html_dsl/types/html","title":"nav","content":"pub fn nav(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a nav element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.nav\nhtml_dsl/types/html nav","url":"html_dsl/types/html.html#nav"},{"doc":"html_dsl/types/html","title":"p","content":"pub fn p(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a paragraph element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.p\nhtml_dsl/types/html p","url":"html_dsl/types/html.html#p"},{"doc":"html_dsl/types/html","title":"section","content":"pub fn section(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a section element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.section\nhtml_dsl/types/html section","url":"html_dsl/types/html.html#section"},{"doc":"html_dsl/types/html","title":"span","content":"pub fn span(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a span element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html.span\nhtml_dsl/types/html span","url":"html_dsl/types/html.html#span"},{"doc":"html_dsl/types/html","title":"html_dsl/types/html","content":"","url":"html_dsl/types/html.html"},{"doc":"html_dsl/types/html/lists","title":"ListItem","content":"pub opaque type ListItem\n Exists to prevent strings from being passed to ul and ol\n\nSynonyms:\nhtml_dsl/types/html/lists.ListItem\nhtml_dsl/types/html/lists ListItem","url":"html_dsl/types/html/lists.html#ListItem"},{"doc":"html_dsl/types/html/lists","title":"add","content":"pub fn add(\n  root root: ListItem,\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: String,\n) -&gt; ListItem\n This creates a string that represents a list item element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A ListItem\nSynonyms:\nhtml_dsl/types/html/lists.add\nhtml_dsl/types/html/lists add","url":"html_dsl/types/html/lists.html#add"},{"doc":"html_dsl/types/html/lists","title":"li","content":"pub fn li() -&gt; ListItem\n\nSynonyms:\nhtml_dsl/types/html/lists.li\nhtml_dsl/types/html/lists li","url":"html_dsl/types/html/lists.html#li"},{"doc":"html_dsl/types/html/lists","title":"li_to_string","content":"pub fn li_to_string(li: ListItem) -&gt; String\n\nSynonyms:\nhtml_dsl/types/html/lists.li_to_string\nhtml_dsl/types/html/lists li_to_string","url":"html_dsl/types/html/lists.html#li_to_string"},{"doc":"html_dsl/types/html/lists","title":"ol","content":"pub fn ol(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: ListItem,\n) -&gt; String\n This creates a string that represents an ordered list element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: a list of ListItems\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html/lists.ol\nhtml_dsl/types/html/lists ol","url":"html_dsl/types/html/lists.html#ol"},{"doc":"html_dsl/types/html/lists","title":"ul","content":"pub fn ul(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: ListItem,\n) -&gt; String\n This creates a string that represents an unordered list element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: a list of ListItems\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html/lists.ul\nhtml_dsl/types/html/lists ul","url":"html_dsl/types/html/lists.html#ul"},{"doc":"html_dsl/types/html/lists","title":"html_dsl/types/html/lists","content":"","url":"html_dsl/types/html/lists.html"},{"doc":"html_dsl/types/html/form","title":"Input","content":"pub opaque type Input\n Exists to prevent strings from being passed to forms\n\nSynonyms:\nhtml_dsl/types/html/form.Input\nhtml_dsl/types/html/form Input","url":"html_dsl/types/html/form.html#Input"},{"doc":"html_dsl/types/html/form","title":"InputType","content":"pub type InputType {\n  Button\n  Checkbox\n  Color\n  Date\n  DatetimeLocal\n  Email\n  File\n  Hidden\n  Image\n  Month\n  Number\n  Password\n  Radio\n  Range\n  Reset\n  Search\n  Submit\n  Tel\n  Text\n  Time\n  Url\n  Week\n}\n An enum of all possible input types for an HTML input element.\nButton\n\n\nCheckbox\n\n\nColor\n\n\nDate\n\n\nDatetimeLocal\n\n\nEmail\n\n\nFile\n\n\nHidden\n\n\nImage\n\n\nMonth\n\n\nNumber\n\n\nPassword\n\n\nRadio\n\n\nRange\n\n\nReset\n\n\nSearch\n\n\nSubmit\n\n\nTel\n\n\nText\n\n\nTime\n\n\nUrl\n\n\nWeek\n\n\nSynonyms:\nhtml_dsl/types/html/form.InputType\nhtml_dsl/types/html/form InputType","url":"html_dsl/types/html/form.html#InputType"},{"doc":"html_dsl/types/html/form","title":"element","content":"pub fn element(\n  root root: Input,\n  content content: String,\n) -&gt; Input\n Element is part of an opaque type, so it can&#39;t be accessed directly\n\n This function is used to create an Element\n  - `@param` content: The content of the element\n  - `@returns`: An Element\nSynonyms:\nhtml_dsl/types/html/form.element\nhtml_dsl/types/html/form element","url":"html_dsl/types/html/form.html#element"},{"doc":"html_dsl/types/html/form","title":"form","content":"pub fn form(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  inner inner: Input,\n) -&gt; String\n This creates a string that represents a form element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html/form.form\nhtml_dsl/types/html/form form","url":"html_dsl/types/html/form.html#form"},{"doc":"html_dsl/types/html/form","title":"init","content":"pub fn init() -&gt; Input\n\nSynonyms:\nhtml_dsl/types/html/form.init\nhtml_dsl/types/html/form init","url":"html_dsl/types/html/form.html#init"},{"doc":"html_dsl/types/html/form","title":"input","content":"pub fn input(\n  root root: Input,\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  input_type input_type: InputType,\n  placeholder placeholder: String,\n) -&gt; Input\n This creates a string that represents an input element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` input_type: The type of the input\n  - `@param` placeholder: The placeholder of the input\n  - `@returns`: An Input\nSynonyms:\nhtml_dsl/types/html/form.input\nhtml_dsl/types/html/form input","url":"html_dsl/types/html/form.html#input"},{"doc":"html_dsl/types/html/form","title":"input_to_string","content":"pub fn input_to_string(input: Input) -&gt; String\n\nSynonyms:\nhtml_dsl/types/html/form.input_to_string\nhtml_dsl/types/html/form input_to_string","url":"html_dsl/types/html/form.html#input_to_string"},{"doc":"html_dsl/types/html/form","title":"input_type_to_attribute","content":"pub fn input_type_to_attribute(input_type: InputType) -&gt; String\n A function that converts an input type to the corresponding HTML attribute as a string.\n  - `@param` input_type: The input type to convert.\n  - `@return`: The corresponding HTML attribute as a string.\n @example\n \n let str = input_type_to_attribute(InputType.Text)\n // str == &quot;type=\\&quot;text\\&quot;&quot;\n \nSynonyms:\nhtml_dsl/types/html/form.input_type_to_attribute\nhtml_dsl/types/html/form input_type_to_attribute","url":"html_dsl/types/html/form.html#input_type_to_attribute"},{"doc":"html_dsl/types/html/form","title":"label","content":"pub fn label(\n  root root: Input,\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  innner inner: String,\n) -&gt; Input\n This creates a string that represents a label element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: An Input\nSynonyms:\nhtml_dsl/types/html/form.label\nhtml_dsl/types/html/form label","url":"html_dsl/types/html/form.html#label"},{"doc":"html_dsl/types/html/form","title":"html_dsl/types/html/form","content":"","url":"html_dsl/types/html/form.html"},{"doc":"html_dsl","title":"main","content":"pub fn main() -&gt; Nil\n Example of creating an HTML string\nSynonyms:\nhtml_dsl.main\nhtml_dsl main","url":"html_dsl.html#main"},{"doc":"html_dsl","title":"html_dsl","content":"","url":"html_dsl.html"},{"doc":"html_dsl/types/html/form/selection","title":"Option","content":"pub opaque type Option\n\n\nSynonyms:\nhtml_dsl/types/html/form/selection.Option\nhtml_dsl/types/html/form/selection Option","url":"html_dsl/types/html/form/selection.html#Option"},{"doc":"html_dsl/types/html/form/selection","title":"add","content":"pub fn add(\n  root root: Option,\n  value value: String,\n  inner inner: String,\n) -&gt; Option\n This creates a string that represents an option element\n  - `@param` value: The value of the option\n  - `@param` children: The children of the option\n  - `@returns`: An Option\nSynonyms:\nhtml_dsl/types/html/form/selection.add\nhtml_dsl/types/html/form/selection add","url":"html_dsl/types/html/form/selection.html#add"},{"doc":"html_dsl/types/html/form/selection","title":"option","content":"pub fn option() -&gt; Option\n\nSynonyms:\nhtml_dsl/types/html/form/selection.option\nhtml_dsl/types/html/form/selection option","url":"html_dsl/types/html/form/selection.html#option"},{"doc":"html_dsl/types/html/form/selection","title":"option_to_string","content":"pub fn option_to_string(option: Option) -&gt; String\n\nSynonyms:\nhtml_dsl/types/html/form/selection.option_to_string\nhtml_dsl/types/html/form/selection option_to_string","url":"html_dsl/types/html/form/selection.html#option_to_string"},{"doc":"html_dsl/types/html/form/selection","title":"select","content":"pub fn select(\n  id id: String,\n  class class: String,\n  attributes attributes: Attribute,\n  options options: Option,\n) -&gt; String\n This creates a string that represents a select element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` options: The options of the select\n  - `@returns`: A string that represents the HTML element\nSynonyms:\nhtml_dsl/types/html/form/selection.select\nhtml_dsl/types/html/form/selection select","url":"html_dsl/types/html/form/selection.html#select"},{"doc":"html_dsl/types/html/form/selection","title":"html_dsl/types/html/form/selection","content":"","url":"html_dsl/types/html/form/selection.html"}]);