window.Gleam.initSearch([{"doc":"html_dsl","title":"html_dsl","content":"# html_dsl\n\n[![Package Version](https://img.shields.io/hexpm/v/html_dsl)](https://hex.pm/packages/html_dsl)\n[![Hex Docs](https://img.shields.io/badge/hex-docs-ffaff3)](https://hexdocs.pm/html_dsl/)\n[![test](https://github.com/Qinbeans/html-dsl/actions/workflows/test.yml/badge.svg)](https://github.com/Qinbeans/html-dsl/actions/workflows/test.yml)\n\nA fun way to create HTML in Gleam.\n\nFurther documentation can be found at &lt;https://hexdocs.pm/html_dsl&gt;.\n\n## Development\n\n```sh\ngleam run   # Run the project\ngleam test  # Run the tests\ngleam shell # Run an Erlang shell\n```\n","url":"index.html"},{"doc":"types/class","title":"Class","content":"pub type Class {\n  Class(String)\n  Nil\n}\n Refers to the class attribute of a node.\n\n Exists for clarity and to avoid misuse with proper strings\nClass(String)\n\n\nNil\n\n\nSynonyms:\ntypes/class.Class\ntypes/class Class","url":"types/class.html#Class"},{"doc":"types/class","title":"types/class","content":"","url":"types/class.html"},{"doc":"types/id","title":"Id","content":"pub type Id {\n  Id(String)\n  Nil\n}\n Refers to the id attribute of a node.\n\n Exists for clarity and to avoid misuse with proper strings\nId(String)\n\n\nNil\n\n\nSynonyms:\ntypes/id.Id\ntypes/id Id","url":"types/id.html#Id"},{"doc":"types/id","title":"types/id","content":"","url":"types/id.html"},{"doc":"types/input","title":"InputType","content":"pub type InputType {\n  Button\n  Checkbox\n  Color\n  Date\n  DatetimeLocal\n  Email\n  File\n  Hidden\n  Image\n  Month\n  Number\n  Password\n  Radio\n  Range\n  Reset\n  Search\n  Submit\n  Tel\n  Text\n  Time\n  Url\n  Week\n}\n An enum of all possible input types for an HTML input element.\nButton\n\n\nCheckbox\n\n\nColor\n\n\nDate\n\n\nDatetimeLocal\n\n\nEmail\n\n\nFile\n\n\nHidden\n\n\nImage\n\n\nMonth\n\n\nNumber\n\n\nPassword\n\n\nRadio\n\n\nRange\n\n\nReset\n\n\nSearch\n\n\nSubmit\n\n\nTel\n\n\nText\n\n\nTime\n\n\nUrl\n\n\nWeek\n\n\nSynonyms:\ntypes/input.InputType\ntypes/input InputType","url":"types/input.html#InputType"},{"doc":"types/input","title":"input_type_to_attribute","content":"pub fn input_type_to_attribute(input_type: InputType) -&gt; String\n A function that converts an input type to the corresponding HTML attribute as a string.\n  - `@param` input_type: The input type to convert.\n  - `@return`: The corresponding HTML attribute as a string.\n @example\n \n let str = input_type_to_attribute(InputType.Text)\n // str == &quot;type=\\&quot;text\\&quot;&quot;\n \nSynonyms:\ntypes/input.input_type_to_attribute\ntypes/input input_type_to_attribute","url":"types/input.html#input_type_to_attribute"},{"doc":"types/input","title":"types/input","content":"","url":"types/input.html"},{"doc":"utils/check","title":"illegal_string_check","content":"pub fn illegal_string_check(str: String) -&gt; String\n\nSynonyms:\nutils/check.illegal_string_check\nutils/check illegal_string_check","url":"utils/check.html#illegal_string_check"},{"doc":"utils/check","title":"utils/check","content":"","url":"utils/check.html"},{"doc":"types/html","title":"Attribute","content":"pub type Attribute {\n  Attribute(key: String, value: String)\n}\n Similar to a pair, but uniquely named\nAttribute(key: String, value: String)\n\n\nSynonyms:\ntypes/html.Attribute\ntypes/html Attribute","url":"types/html.html#Attribute"},{"doc":"types/html","title":"Head","content":"pub opaque type Head\n Head is a type that represents the head of an HTML document\n\nSynonyms:\ntypes/html.Head\ntypes/html Head","url":"types/html.html#Head"},{"doc":"types/html","title":"Html","content":"pub opaque type Html\n Exists to prevent strings from being passed to engines\n\n Engines should require `Html` or `Component`\n\nSynonyms:\ntypes/html.Html\ntypes/html Html","url":"types/html.html#Html"},{"doc":"types/html","title":"Input","content":"pub opaque type Input\n Exists to prevent strings from being passed to forms\n\nSynonyms:\ntypes/html.Input\ntypes/html Input","url":"types/html.html#Input"},{"doc":"types/html","title":"ListItem","content":"pub opaque type ListItem\n Exists to prevent strings from being passed to ul and ol\n\nSynonyms:\ntypes/html.ListItem\ntypes/html ListItem","url":"types/html.html#ListItem"},{"doc":"types/html","title":"Option","content":"pub opaque type Option\n Exists to prevent strings from being passed to select\n\nSynonyms:\ntypes/html.Option\ntypes/html Option","url":"types/html.html#Option"},{"doc":"types/html","title":"a","content":"pub fn a(\n  id: Id,\n  class: Class,\n  href: String,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; String\n This creates a string that represents an anchor element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` href: The href of the anchor\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.a\ntypes/html a","url":"types/html.html#a"},{"doc":"types/html","title":"article","content":"pub fn article(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: String,\n) -&gt; String\n This creates a string that represents an article element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.article\ntypes/html article","url":"types/html.html#article"},{"doc":"types/html","title":"aside","content":"pub fn aside(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: String,\n) -&gt; String\n This creates a string that represents an aside element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.aside\ntypes/html aside","url":"types/html.html#aside"},{"doc":"types/html","title":"attribute","content":"pub fn attribute(key: String, value: String) -&gt; Attribute\n This function is used to create an Attribute\n  - `@param` key: The key of the attribute\n  - `@param` value: The value of the attribute\n  - `@returns`: An Attribute\nSynonyms:\ntypes/html.attribute\ntypes/html attribute","url":"types/html.html#attribute"},{"doc":"types/html","title":"body","content":"pub fn body(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: String,\n) -&gt; String\n This creates a string that represents the body of an HTML document\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.body\ntypes/html body","url":"types/html.html#body"},{"doc":"types/html","title":"br","content":"pub fn br() -&gt; String\n This creates a string that represents a break element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.br\ntypes/html br","url":"types/html.html#br"},{"doc":"types/html","title":"button","content":"pub fn button(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: String,\n) -&gt; String\n This creates a string that represents a button element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.button\ntypes/html button","url":"types/html.html#button"},{"doc":"types/html","title":"component","content":"pub fn component(content: String) -&gt; Html\n This creates a string that represents a component\n  - `@param` content: The content of the component\n  - `@returns`: A Component\nSynonyms:\ntypes/html.component\ntypes/html component","url":"types/html.html#component"},{"doc":"types/html","title":"div","content":"pub fn div(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; String\n This creates a string that represents a div element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.div\ntypes/html div","url":"types/html.html#div"},{"doc":"types/html","title":"footer","content":"pub fn footer(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: String,\n) -&gt; String\n This creates a string that represents a footer element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.footer\ntypes/html footer","url":"types/html.html#footer"},{"doc":"types/html","title":"form","content":"pub fn form(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: List(Input),\n) -&gt; String\n This creates a string that represents a form element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.form\ntypes/html form","url":"types/html.html#form"},{"doc":"types/html","title":"h1","content":"pub fn h1(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; String\n This creates a string that represents an h1 element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.h1\ntypes/html h1","url":"types/html.html#h1"},{"doc":"types/html","title":"h2","content":"pub fn h2(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; String\n This creates a string that represents an h2 element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.h2\ntypes/html h2","url":"types/html.html#h2"},{"doc":"types/html","title":"h3","content":"pub fn h3(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; String\n This creates a string that represents an h3 element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.h3\ntypes/html h3","url":"types/html.html#h3"},{"doc":"types/html","title":"h4","content":"pub fn h4(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; String\n This creates a string that represents an h4 element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.h4\ntypes/html h4","url":"types/html.html#h4"},{"doc":"types/html","title":"h5","content":"pub fn h5(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; String\n This creates a string that represents an h5 element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.h5\ntypes/html h5","url":"types/html.html#h5"},{"doc":"types/html","title":"h6","content":"pub fn h6(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; String\n This creates a string that represents an h6 element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.h6\ntypes/html h6","url":"types/html.html#h6"},{"doc":"types/html","title":"head","content":"pub fn head(children: List(Head)) -&gt; String\n This creates a string that represents the head of an HTML document\n  - `@param` children: A list of Head elements\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.head\ntypes/html head","url":"types/html.html#head"},{"doc":"types/html","title":"header","content":"pub fn header(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: String,\n) -&gt; String\n This creates a string that represents a header element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.header\ntypes/html header","url":"types/html.html#header"},{"doc":"types/html","title":"hr","content":"pub fn hr() -&gt; String\n This creates a string that represents a horizontal rule element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.hr\ntypes/html hr","url":"types/html.html#hr"},{"doc":"types/html","title":"html","content":"pub fn html(lang: String, children: String) -&gt; Html\n This creates a string that represents an HTML document\n  - `@param` lang: The language of the document\n  - `@param` children: The children of the document\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.html\ntypes/html html","url":"types/html.html#html"},{"doc":"types/html","title":"html_to_string","content":"pub fn html_to_string(html: Html) -&gt; String\n Converts Html enum to a string\nSynonyms:\ntypes/html.html_to_string\ntypes/html html_to_string","url":"types/html.html#html_to_string"},{"doc":"types/html","title":"img","content":"pub fn img(\n  id: Id,\n  class: Class,\n  src: String,\n  alt: String,\n  attributes: List(Attribute),\n) -&gt; String\n This creates a string that represents an image element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` src: The source of the image\n  - `@param` alt: The alt text of the image\n  - `@param` attributes: The attributes of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.img\ntypes/html img","url":"types/html.html#img"},{"doc":"types/html","title":"input","content":"pub fn input(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  input_type: InputType,\n  placeholder: String,\n) -&gt; Input\n This creates a string that represents an input element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` input_type: The type of the input\n  - `@param` placeholder: The placeholder of the input\n  - `@returns`: An Input\nSynonyms:\ntypes/html.input\ntypes/html input","url":"types/html.html#input"},{"doc":"types/html","title":"is_html","content":"pub fn is_html(html: Html) -&gt; Bool\n Check Html enum\n  - `@param` html: The Html enum\n  - `@returns`: True if the Html enum is Html, False if it is Component\nSynonyms:\ntypes/html.is_html\ntypes/html is_html","url":"types/html.html#is_html"},{"doc":"types/html","title":"label","content":"pub fn label(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; Input\n This creates a string that represents a label element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: An Input\nSynonyms:\ntypes/html.label\ntypes/html label","url":"types/html.html#label"},{"doc":"types/html","title":"li","content":"pub fn li(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; ListItem\n This creates a string that represents a list item element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A ListItem\nSynonyms:\ntypes/html.li\ntypes/html li","url":"types/html.html#li"},{"doc":"types/html","title":"link","content":"pub fn link(\n  rel: String,\n  href: String,\n  attributes: List(Attribute),\n) -&gt; Head\n This creates a string that represents a link element\n  - `@param` rel: The relationship of the link\n  - `@param` href: The href of the link\n  - `@param` attributes: The attributes of the link\n  - `@returns`: A Head\nSynonyms:\ntypes/html.link\ntypes/html link","url":"types/html.html#link"},{"doc":"types/html","title":"main","content":"pub fn main(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: String,\n) -&gt; String\n This creates a string that represents a main element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.main\ntypes/html main","url":"types/html.html#main"},{"doc":"types/html","title":"meta","content":"pub fn meta(name: String, content: String) -&gt; Head\n This creates a string that represents a meta element\n  - `@param` name: The name of the meta\n  - `@param` content: The content of the meta\n  - `@returns`: A Head\nSynonyms:\ntypes/html.meta\ntypes/html meta","url":"types/html.html#meta"},{"doc":"types/html","title":"nav","content":"pub fn nav(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: String,\n) -&gt; String\n This creates a string that represents a nav element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.nav\ntypes/html nav","url":"types/html.html#nav"},{"doc":"types/html","title":"new_element","content":"pub fn new_element(content: String) -&gt; Input\n Element is part of an opaque type, so it can&#39;t be accessed directly\n\n This function is used to create an Element\n  - `@param` content: The content of the element\n  - `@returns`: An Element\nSynonyms:\ntypes/html.new_element\ntypes/html new_element","url":"types/html.html#new_element"},{"doc":"types/html","title":"ol","content":"pub fn ol(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: List(ListItem),\n) -&gt; String\n This creates a string that represents an ordered list element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: a list of ListItems\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.ol\ntypes/html ol","url":"types/html.html#ol"},{"doc":"types/html","title":"option","content":"pub fn option(value: String, children: String) -&gt; Option\n This creates a string that represents an option element\n  - `@param` value: The value of the option\n  - `@param` children: The children of the option\n  - `@returns`: An Option\nSynonyms:\ntypes/html.option\ntypes/html option","url":"types/html.html#option"},{"doc":"types/html","title":"p","content":"pub fn p(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; String\n This creates a string that represents a paragraph element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.p\ntypes/html p","url":"types/html.html#p"},{"doc":"types/html","title":"render_attribute","content":"pub fn render_attribute(attribute: Attribute) -&gt; String\n This function is used to create a ListItem\n  - `@param` content: The content of the list item\n  - `@returns`: A ListItem\nSynonyms:\ntypes/html.render_attribute\ntypes/html render_attribute","url":"types/html.html#render_attribute"},{"doc":"types/html","title":"script","content":"pub fn script(src: String) -&gt; Head\n This creates a string that represents a script element\n  - `@param` src: The source of the script\n  - `@returns`: A Head\nSynonyms:\ntypes/html.script\ntypes/html script","url":"types/html.html#script"},{"doc":"types/html","title":"section","content":"pub fn section(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: String,\n) -&gt; String\n This creates a string that represents a section element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: The children of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.section\ntypes/html section","url":"types/html.html#section"},{"doc":"types/html","title":"select","content":"pub fn select(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  options: List(Option),\n) -&gt; String\n This creates a string that represents a select element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` options: The options of the select\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.select\ntypes/html select","url":"types/html.html#select"},{"doc":"types/html","title":"span","content":"pub fn span(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  child: String,\n) -&gt; String\n This creates a string that represents a span element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` child: The child of the element\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.span\ntypes/html span","url":"types/html.html#span"},{"doc":"types/html","title":"style","content":"pub fn style(src: String) -&gt; Head\n This creates a string that represents a special link element for stylesheets\n  - `@param` src: The source of the stylesheet\n  - `@returns`: A Head\nSynonyms:\ntypes/html.style\ntypes/html style","url":"types/html.html#style"},{"doc":"types/html","title":"title","content":"pub fn title(content: String) -&gt; Head\n This creates a string that represents a title element\n  - `@param` content: The content of the title\n  - `@returns`: A Head\nSynonyms:\ntypes/html.title\ntypes/html title","url":"types/html.html#title"},{"doc":"types/html","title":"ul","content":"pub fn ul(\n  id: Id,\n  class: Class,\n  attributes: List(Attribute),\n  children: List(ListItem),\n) -&gt; String\n This creates a string that represents an unordered list element\n  - `@param` id: The id of the element\n  - `@param` class: The class of the element\n  - `@param` attributes: The attributes of the element\n  - `@param` children: a list of ListItems\n  - `@returns`: A string that represents the HTML element\nSynonyms:\ntypes/html.ul\ntypes/html ul","url":"types/html.html#ul"},{"doc":"types/html","title":"types/html","content":"","url":"types/html.html"},{"doc":"html_dsl","title":"main","content":"pub fn main() -&gt; Nil\n Example of creating an HTML string\nSynonyms:\nhtml_dsl.main\nhtml_dsl main","url":"html_dsl.html#main"},{"doc":"html_dsl","title":"html_dsl","content":"","url":"html_dsl.html"}]);