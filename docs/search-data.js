window.Gleam.initSearch([{"doc":"html_dsl","title":"html_dsl","content":"# html_dsl\r\n\r\n[![Hex Docs](https://img.shields.io/badge/hex-docs-ffaff3)](https://qinbeans.github.io/html-dsl/)\r\n[![test](https://github.com/Qinbeans/html-dsl/actions/workflows/test.yml/badge.svg)](https://github.com/Qinbeans/html-dsl/actions/workflows/test.yml)\r\n\r\nA fun way to create HTML in Gleam.\r\n\r\n## Premise\r\n\r\nI wanted a simple framework to build HTML and I saw a way forward with strings.\r\n\r\nI thought that Gleam had a very unique type system in which I could wrap strings around a named type like `Html` or `Head`. The way I implemented it does restrict general reactivity through Gleam itself, but I never thought making this a standalone framework as an option. The idea was to combine this with existing frontend libraries like HTMX to add that touch of reactivity.\r\n\r\n## Going forward\r\n\r\nI&#39;m not sure what else to expand except implementing more existing HTML elements.\r\n\r\n## Installation\r\n\r\n```sh\r\ngleam add html_dsl\r\n```\r\n\r\n## Examples\r\n\r\n```gleam\r\nimport html_dsl/types/html.{body, button, h1, header, html}\r\nimport html_dsl/types/html/head.{charset, head, meta, title}\r\nimport html_dsl/types/html/lists.{li, ul}\r\nimport html_dsl/types/html/form.{Submit, Text, form, input, label}\r\nimport html_dsl/types/attribute.{attribute}\r\n// If you&#39;re familiar with HTML, this might seem pretty standalone\r\nfn main() {\r\n  let my_doc = html(\r\n    lang: &quot;en&quot;,\r\n    head: head()\r\n      |&gt; title(&quot;Hello, Gleam!&quot;)\r\n      |&gt; charset(&quot;UTF-8&quot;)\r\n      |&gt; meta(&quot;description&quot;, &quot;A Gleam program that generates HTML.&quot;),\r\n    body: body(\r\n      id: &quot;main-content&quot;,\r\n      class: &quot;grid&quot;,\r\n      attributes: attribute(),\r\n      inner: header(&quot;&quot;, &quot;&quot;, attribute(), &quot;&quot;)\r\n        &lt;&gt; case False {\r\n          True -&gt; h1(&quot;&quot;, &quot;&quot;, attribute(), &quot;True&quot;)\r\n          False -&gt; h1(&quot;&quot;, &quot;&quot;, attribute(), &quot;False&quot;)\r\n        }\r\n        &lt;&gt; ul(\r\n          &quot;&quot;,\r\n          &quot;&quot;,\r\n          attribute(),\r\n          li()\r\n            |&gt; lists.add(&quot;&quot;, &quot;&quot;, attribute(), &quot;This is a list item&quot;)\r\n            |&gt; lists.add(&quot;&quot;, &quot;&quot;, attribute(), &quot;This is another list item&quot;),\r\n        )\r\n        &lt;&gt; form(\r\n          &quot;&quot;,\r\n          &quot;&quot;,\r\n          attribute(),\r\n          form.init()\r\n            |&gt; label(&quot;&quot;, &quot;&quot;, attribute(), &quot;Name:&quot;)\r\n            |&gt; input(&quot;&quot;, &quot;&quot;, attribute(), Text, &quot;name&quot;)\r\n            |&gt; input(&quot;&quot;, &quot;&quot;, attribute(), Submit, &quot;submit&quot;)\r\n            |&gt; form.element(button(&quot;&quot;, &quot;&quot;, attribute(), &quot;Click me!&quot;)),\r\n        ),\r\n    ),\r\n  )\r\n  // We can access the document as a string\r\n  let _ = html.html_to_string(my_doc)\r\n  // or through the pipe operator\r\n  let _ = my_doc\r\n  |&gt; html.html_to_string()\r\n}\r\n```\r\nSo why use strings to build each element? Ultimately everything is parsed into a string so I wanted to get straight to the point with little to no intermediate step. Don&#39;t get me wrong, I still have intermediate&#39;s here and there, but that&#39;s more for explicitness. It prevents bad [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) from being written.\r\n\r\n## Development\r\n\r\nThis is for use for contributors to the project.\r\n\r\n```sh\r\n./dev.sh run   # Run the project\r\n./dev.sh test  # Run the tests\r\n./dev.sh docs  # Generate the documentation\r\n./dev.sh build # Build the project\r\n```\r\n","url":"index.html"},{"doc":"html_dsl/utils/check","title":"illegal_string_check","content":"pub fn illegal_string_check(str: String) -&gt; String\n Checks a given string for illegal characters and replaces them with their HTML entity\r\nSynonyms:\nhtml_dsl/utils/check.illegal_string_check\nhtml_dsl/utils/check illegal_string_check","url":"html_dsl/utils/check.html#illegal_string_check"},{"doc":"html_dsl/utils/check","title":"html_dsl/utils/check","content":"","url":"html_dsl/utils/check.html"},{"doc":"html_dsl/types/attribute","title":"Attribute","content":"pub opaque type Attribute\n Similar to a pair, but uniquely named\r\n\nSynonyms:\nhtml_dsl/types/attribute.Attribute\nhtml_dsl/types/attribute Attribute","url":"html_dsl/types/attribute.html#Attribute"},{"doc":"html_dsl/types/attribute","title":"add","content":"pub fn add(\n  root: Option(Attribute),\n  key: String,\n  value: String,\n) -&gt; Option(Attribute)\n Adds an attribute to an attribute\r\n - `@param` root: The root attribute\r\n - `@param` key: The key of the attribute\r\n - `@param` value: The value of the attribute\r\n - `@returns`: An Attribute\r\nSynonyms:\nhtml_dsl/types/attribute.add\nhtml_dsl/types/attribute add","url":"html_dsl/types/attribute.html#add"},{"doc":"html_dsl/types/attribute","title":"attribute_to_string","content":"pub fn attribute_to_string(\n  attribute: Option(Attribute),\n) -&gt; String\n This function is used to convert an attribute to a string\r\n  - `@param` attribute: The attribute to convert\r\n  - `@returns`: String\r\nSynonyms:\nhtml_dsl/types/attribute.attribute_to_string\nhtml_dsl/types/attribute attribute_to_string","url":"html_dsl/types/attribute.html#attribute_to_string"},{"doc":"html_dsl/types/attribute","title":"class","content":"pub fn class(\n  root: Option(Attribute),\n  classes: String,\n) -&gt; Option(Attribute)\n Shortcut for creating a class attribute\r\n - `@param` root: The root attribute\r\n - `@param` classes: The classes to add\r\n - `@returns`: An Attribute\r\nSynonyms:\nhtml_dsl/types/attribute.class\nhtml_dsl/types/attribute class","url":"html_dsl/types/attribute.html#class"},{"doc":"html_dsl/types/attribute","title":"id","content":"pub fn id(\n  root: Option(Attribute),\n  id: String,\n) -&gt; Option(Attribute)\n Shortcut for creating a id attribute\r\n - `@param` root: The root attribute\r\n - `@param` id: The id to add\r\n - `@returns`: An Attribute\r\nSynonyms:\nhtml_dsl/types/attribute.id\nhtml_dsl/types/attribute id","url":"html_dsl/types/attribute.html#id"},{"doc":"html_dsl/types/attribute","title":"new","content":"pub fn new() -&gt; Option(Attribute)\n This function is used to create an attribute\r\n - `@returns`: An Attribute\r\nSynonyms:\nhtml_dsl/types/attribute.new\nhtml_dsl/types/attribute new","url":"html_dsl/types/attribute.html#new"},{"doc":"html_dsl/types/attribute","title":"html_dsl/types/attribute","content":"","url":"html_dsl/types/attribute.html"},{"doc":"html_dsl/types/html/head","title":"Head","content":"pub opaque type Head\n Head is a type that represents the head of an HTML document\r\n\nSynonyms:\nhtml_dsl/types/html/head.Head\nhtml_dsl/types/html/head Head","url":"html_dsl/types/html/head.html#Head"},{"doc":"html_dsl/types/html/head","title":"charset","content":"pub fn charset(root: Head, set: String) -&gt; Head\n This creates a string that represents a meta charset\r\n  - `@param` charset: the intended charset\r\n  - `@return`: A Head\r\nSynonyms:\nhtml_dsl/types/html/head.charset\nhtml_dsl/types/html/head charset","url":"html_dsl/types/html/head.html#charset"},{"doc":"html_dsl/types/html/head","title":"end","content":"pub fn end(root: Head) -&gt; Head\n Ends a head context\r\n - `@param` root: The head to end\r\n - `@returns`: A Head\r\nSynonyms:\nhtml_dsl/types/html/head.end\nhtml_dsl/types/html/head end","url":"html_dsl/types/html/head.html#end"},{"doc":"html_dsl/types/html/head","title":"head","content":"pub fn head() -&gt; Head\n Starts a head context\r\n - `@returns`: A Head\r\nSynonyms:\nhtml_dsl/types/html/head.head\nhtml_dsl/types/html/head head","url":"html_dsl/types/html/head.html#head"},{"doc":"html_dsl/types/html/head","title":"head_to_string","content":"pub fn head_to_string(head: Head) -&gt; String\n This function converts a Head to a string\r\n  - `@param` head: The head to convert\r\n  - `@returns`: A string\r\nSynonyms:\nhtml_dsl/types/html/head.head_to_string\nhtml_dsl/types/html/head head_to_string","url":"html_dsl/types/html/head.html#head_to_string"},{"doc":"html_dsl/types/html/head","title":"link","content":"pub fn link(\n  root: Head,\n  rel: String,\n  href: String,\n  attributes: Option(Attribute),\n) -&gt; Head\n This creates a string that represents a link element\r\n  - `@param` rel: The relationship of the link\r\n  - `@param` href: The href of the link\r\n  - `@param` attributes: The attributes of the link\r\n  - `@returns`: A Head\r\nSynonyms:\nhtml_dsl/types/html/head.link\nhtml_dsl/types/html/head link","url":"html_dsl/types/html/head.html#link"},{"doc":"html_dsl/types/html/head","title":"meta","content":"pub fn meta(root: Head, name: String, content: String) -&gt; Head\n This creates a string that represents a meta element\r\n  - `@param` name: The name of the meta\r\n  - `@param` content: The content of the meta\r\n  - `@returns`: A Head\r\nSynonyms:\nhtml_dsl/types/html/head.meta\nhtml_dsl/types/html/head meta","url":"html_dsl/types/html/head.html#meta"},{"doc":"html_dsl/types/html/head","title":"resolve","content":"pub fn resolve(head: Head) -&gt; Result(String, String)\n This function resolves a Head to a string or an error\r\n  - `@param` head: The head to resolve\r\n  - `@returns`: A Result\r\nSynonyms:\nhtml_dsl/types/html/head.resolve\nhtml_dsl/types/html/head resolve","url":"html_dsl/types/html/head.html#resolve"},{"doc":"html_dsl/types/html/head","title":"script","content":"pub fn script(root: Head, src: String) -&gt; Head\n This creates a string that represents a script element\r\n  - `@param` src: The source of the script\r\n  - `@returns`: A Head\r\nSynonyms:\nhtml_dsl/types/html/head.script\nhtml_dsl/types/html/head script","url":"html_dsl/types/html/head.html#script"},{"doc":"html_dsl/types/html/head","title":"style","content":"pub fn style(root: Head, src: String) -&gt; Head\n This creates a string that represents a special link element for stylesheets\r\n  - `@param` src: The source of the stylesheet\r\n  - `@returns`: A Head\r\nSynonyms:\nhtml_dsl/types/html/head.style\nhtml_dsl/types/html/head style","url":"html_dsl/types/html/head.html#style"},{"doc":"html_dsl/types/html/head","title":"title","content":"pub fn title(root: Head, content: String) -&gt; Head\n This creates a string that represents a title element\r\n  - `@param` content: The content of the title\r\n  - `@returns`: A Head\r\nSynonyms:\nhtml_dsl/types/html/head.title\nhtml_dsl/types/html/head title","url":"html_dsl/types/html/head.html#title"},{"doc":"html_dsl/types/html/head","title":"html_dsl/types/html/head","content":"","url":"html_dsl/types/html/head.html"},{"doc":"html_dsl/types/html","title":"Body","content":"pub opaque type Body\n Exists to prevent strings from being passed to engines\r\n\nSynonyms:\nhtml_dsl/types/html.Body\nhtml_dsl/types/html Body","url":"html_dsl/types/html.html#Body"},{"doc":"html_dsl/types/html","title":"Html","content":"pub opaque type Html\n Exists to prevent strings from being passed to engines\r\n\n Engines should require `Html` or `Component`\r\n\nSynonyms:\nhtml_dsl/types/html.Html\nhtml_dsl/types/html Html","url":"html_dsl/types/html.html#Html"},{"doc":"html_dsl/types/html","title":"a","content":"pub fn a(\n  href href: String,\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an anchor element\r\n  - `@param` href: The href of the anchor\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.a\nhtml_dsl/types/html a","url":"html_dsl/types/html.html#a"},{"doc":"html_dsl/types/html","title":"article","content":"pub fn article(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an article element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.article\nhtml_dsl/types/html article","url":"html_dsl/types/html.html#article"},{"doc":"html_dsl/types/html","title":"aside","content":"pub fn aside(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an aside element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.aside\nhtml_dsl/types/html aside","url":"html_dsl/types/html.html#aside"},{"doc":"html_dsl/types/html","title":"body","content":"pub fn body(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; Body\n This creates a string that represents the body of an HTML document\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.body\nhtml_dsl/types/html body","url":"html_dsl/types/html.html#body"},{"doc":"html_dsl/types/html","title":"body_to_string","content":"pub fn body_to_string(body: Body) -&gt; String\n Converts body to string\r\nSynonyms:\nhtml_dsl/types/html.body_to_string\nhtml_dsl/types/html body_to_string","url":"html_dsl/types/html.html#body_to_string"},{"doc":"html_dsl/types/html","title":"br","content":"pub fn br() -&gt; String\n This creates a string that represents a break element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.br\nhtml_dsl/types/html br","url":"html_dsl/types/html.html#br"},{"doc":"html_dsl/types/html","title":"button","content":"pub fn button(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a button element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.button\nhtml_dsl/types/html button","url":"html_dsl/types/html.html#button"},{"doc":"html_dsl/types/html","title":"component","content":"pub fn component(content: String) -&gt; Html\n This creates a string that represents a component\r\n  - `@param` content: The content of the component\r\n  - `@returns`: A Component\r\nSynonyms:\nhtml_dsl/types/html.component\nhtml_dsl/types/html component","url":"html_dsl/types/html.html#component"},{"doc":"html_dsl/types/html","title":"div","content":"pub fn div(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a div element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.div\nhtml_dsl/types/html div","url":"html_dsl/types/html.html#div"},{"doc":"html_dsl/types/html","title":"footer","content":"pub fn footer(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a footer element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.footer\nhtml_dsl/types/html footer","url":"html_dsl/types/html.html#footer"},{"doc":"html_dsl/types/html","title":"force","content":"pub fn force(result: Result(Html, String)) -&gt; Html\n This force resolves a `Result(Html, String)` to `Html`\r\n  - `@param` result: The result to resolve\r\n  - `@returns`: The resolved `Html`\r\nSynonyms:\nhtml_dsl/types/html.force\nhtml_dsl/types/html force","url":"html_dsl/types/html.html#force"},{"doc":"html_dsl/types/html","title":"h1","content":"pub fn h1(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h1 element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.h1\nhtml_dsl/types/html h1","url":"html_dsl/types/html.html#h1"},{"doc":"html_dsl/types/html","title":"h2","content":"pub fn h2(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h2 element\r\n - `@param` attributes: The attributes of the element\r\n - `@param` inner: The child of the element\r\n - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.h2\nhtml_dsl/types/html h2","url":"html_dsl/types/html.html#h2"},{"doc":"html_dsl/types/html","title":"h3","content":"pub fn h3(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h3 element\r\n - `@param` attributes: The attributes of the element\r\n - `@param` inner: The child of the element\r\n - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.h3\nhtml_dsl/types/html h3","url":"html_dsl/types/html.html#h3"},{"doc":"html_dsl/types/html","title":"h4","content":"pub fn h4(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h4 element\r\n - `@param` attributes: The attributes of the element\r\n - `@param` inner: The child of the element\r\n - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.h4\nhtml_dsl/types/html h4","url":"html_dsl/types/html.html#h4"},{"doc":"html_dsl/types/html","title":"h5","content":"pub fn h5(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h5 element\r\n - `@param` attributes: The attributes of the element\r\n - `@param` inner: The child of the element\r\n - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.h5\nhtml_dsl/types/html h5","url":"html_dsl/types/html.html#h5"},{"doc":"html_dsl/types/html","title":"h6","content":"pub fn h6(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents an h6 element\r\n - `@param` attributes: The attributes of the element\r\n - `@param` inner: The child of the element\r\n - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.h6\nhtml_dsl/types/html h6","url":"html_dsl/types/html.html#h6"},{"doc":"html_dsl/types/html","title":"header","content":"pub fn header(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a header element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.header\nhtml_dsl/types/html header","url":"html_dsl/types/html.html#header"},{"doc":"html_dsl/types/html","title":"hr","content":"pub fn hr() -&gt; String\n This creates a string that represents a horizontal rule element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.hr\nhtml_dsl/types/html hr","url":"html_dsl/types/html.html#hr"},{"doc":"html_dsl/types/html","title":"html","content":"pub fn html(\n  lang lang: String,\n  head head: Head,\n  body body: Body,\n) -&gt; Result(Html, String)\n This creates a string that represents an HTML document\r\n  - `@param` lang: The language of the document\r\n  - `@param` children: The children of the document\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.html\nhtml_dsl/types/html html","url":"html_dsl/types/html.html#html"},{"doc":"html_dsl/types/html","title":"html_to_string","content":"pub fn html_to_string(html: Html) -&gt; String\n Converts Html enum to a string\r\nSynonyms:\nhtml_dsl/types/html.html_to_string\nhtml_dsl/types/html html_to_string","url":"html_dsl/types/html.html#html_to_string"},{"doc":"html_dsl/types/html","title":"img","content":"pub fn img(\n  src src: String,\n  alt alt: String,\n  attributes attributes: Option(Attribute),\n) -&gt; String\n This creates a string that represents an image element\r\n  - `@param` src: The source of the image\r\n  - `@param` alt: The alt text of the image\r\n  - `@param` attributes: The attributes of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.img\nhtml_dsl/types/html img","url":"html_dsl/types/html.html#img"},{"doc":"html_dsl/types/html","title":"is_html","content":"pub fn is_html(html: Html) -&gt; Bool\n Check Html enum\r\n  - `@param` html: The Html enum\r\n  - `@returns`: True if the Html enum is Html, False if it is Component\r\nSynonyms:\nhtml_dsl/types/html.is_html\nhtml_dsl/types/html is_html","url":"html_dsl/types/html.html#is_html"},{"doc":"html_dsl/types/html","title":"main","content":"pub fn main(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a main element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.main\nhtml_dsl/types/html main","url":"html_dsl/types/html.html#main"},{"doc":"html_dsl/types/html","title":"nav","content":"pub fn nav(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a nav element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.nav\nhtml_dsl/types/html nav","url":"html_dsl/types/html.html#nav"},{"doc":"html_dsl/types/html","title":"p","content":"pub fn p(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a paragraph element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.p\nhtml_dsl/types/html p","url":"html_dsl/types/html.html#p"},{"doc":"html_dsl/types/html","title":"section","content":"pub fn section(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a section element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.section\nhtml_dsl/types/html section","url":"html_dsl/types/html.html#section"},{"doc":"html_dsl/types/html","title":"span","content":"pub fn span(\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; String\n This creates a string that represents a span element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html.span\nhtml_dsl/types/html span","url":"html_dsl/types/html.html#span"},{"doc":"html_dsl/types/html","title":"html_dsl/types/html","content":"","url":"html_dsl/types/html.html"},{"doc":"html_dsl/types/html/lists","title":"List","content":"pub opaque type List\n Exists to prevent strings from being passed to ul and ol\r\n\nSynonyms:\nhtml_dsl/types/html/lists.List\nhtml_dsl/types/html/lists List","url":"html_dsl/types/html/lists.html#List"},{"doc":"html_dsl/types/html/lists","title":"add","content":"pub fn add(\n  root: List,\n  attributes attributes: Option(Attribute),\n  inner inner: String,\n) -&gt; List\n This creates a string that represents a list item element\r\n  - `@param` root: The list element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The inner content of the element\r\n  - `@returns`: A ListItem\r\nSynonyms:\nhtml_dsl/types/html/lists.add\nhtml_dsl/types/html/lists add","url":"html_dsl/types/html/lists.html#add"},{"doc":"html_dsl/types/html/lists","title":"end","content":"pub fn end(li: List) -&gt; String\n Closes the element\r\n  - `@param` li: The list element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html/lists.end\nhtml_dsl/types/html/lists end","url":"html_dsl/types/html/lists.html#end"},{"doc":"html_dsl/types/html/lists","title":"li_to_string","content":"pub fn li_to_string(li: List) -&gt; String\n This creates a string that represents a list element\r\n  - `@param` li: The list element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html/lists.li_to_string\nhtml_dsl/types/html/lists li_to_string","url":"html_dsl/types/html/lists.html#li_to_string"},{"doc":"html_dsl/types/html/lists","title":"ol","content":"pub fn ol(attributes attributes: Option(Attribute)) -&gt; List\n This creates a string that represents an ordered list element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html/lists.ol\nhtml_dsl/types/html/lists ol","url":"html_dsl/types/html/lists.html#ol"},{"doc":"html_dsl/types/html/lists","title":"ul","content":"pub fn ul(attributes attributes: Option(Attribute)) -&gt; List\n This creates a string that represents an unordered list element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html/lists.ul\nhtml_dsl/types/html/lists ul","url":"html_dsl/types/html/lists.html#ul"},{"doc":"html_dsl/types/html/lists","title":"html_dsl/types/html/lists","content":"","url":"html_dsl/types/html/lists.html"},{"doc":"html_dsl/types/html/form","title":"Input","content":"pub opaque type Input\n Exists to prevent strings from being passed to forms\r\n\nSynonyms:\nhtml_dsl/types/html/form.Input\nhtml_dsl/types/html/form Input","url":"html_dsl/types/html/form.html#Input"},{"doc":"html_dsl/types/html/form","title":"InputType","content":"pub type InputType {\n  Button\n  Checkbox\n  Color\n  Date\n  DatetimeLocal\n  Email\n  File\n  Hidden\n  Image\n  Month\n  Number\n  Password\n  Radio\n  Range\n  Reset\n  Search\n  Submit\n  Tel\n  Text\n  Time\n  Url\n  Week\n}\n An enum of all possible input types for an HTML input element.\r\nButton\n\n\nCheckbox\n\n\nColor\n\n\nDate\n\n\nDatetimeLocal\n\n\nEmail\n\n\nFile\n\n\nHidden\n\n\nImage\n\n\nMonth\n\n\nNumber\n\n\nPassword\n\n\nRadio\n\n\nRange\n\n\nReset\n\n\nSearch\n\n\nSubmit\n\n\nTel\n\n\nText\n\n\nTime\n\n\nUrl\n\n\nWeek\n\n\nSynonyms:\nhtml_dsl/types/html/form.InputType\nhtml_dsl/types/html/form InputType","url":"html_dsl/types/html/form.html#InputType"},{"doc":"html_dsl/types/html/form","title":"element","content":"pub fn element(\n  root root: Input,\n  content content: String,\n) -&gt; Input\n This function is used to create an Element\r\n  - `@param` root: The root of the element\r\n  - `@param` content: The content of the element\r\n  - `@returns`: An Element\r\nSynonyms:\nhtml_dsl/types/html/form.element\nhtml_dsl/types/html/form element","url":"html_dsl/types/html/form.html#element"},{"doc":"html_dsl/types/html/form","title":"end","content":"pub fn end(root: Input) -&gt; String\n Ends form context\r\n  - `@param` root: The root of the form\r\n  - `@returns`: The string representation of the form\r\nSynonyms:\nhtml_dsl/types/html/form.end\nhtml_dsl/types/html/form end","url":"html_dsl/types/html/form.html#end"},{"doc":"html_dsl/types/html/form","title":"form","content":"pub fn form(attributes attributes: Option(Attribute)) -&gt; Input\n This creates a string that represents a form element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html/form.form\nhtml_dsl/types/html/form form","url":"html_dsl/types/html/form.html#form"},{"doc":"html_dsl/types/html/form","title":"input","content":"pub fn input(\n  root root: Input,\n  attributes attributes: Option(Attribute),\n  input_type input_type: InputType,\n  placeholder placeholder: String,\n) -&gt; Input\n This creates a string that represents an input element\r\n  - `@param` root: The root of the element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` input_type: The type of the input\r\n  - `@param` placeholder: The placeholder of the input\r\n  - `@returns`: An Input\r\nSynonyms:\nhtml_dsl/types/html/form.input\nhtml_dsl/types/html/form input","url":"html_dsl/types/html/form.html#input"},{"doc":"html_dsl/types/html/form","title":"input_to_string","content":"pub fn input_to_string(input: Input) -&gt; String\n This function converts an Input to a string\r\n  - `@param` input: The input to convert\r\n  - `@returns`: The string representation of the input\r\nSynonyms:\nhtml_dsl/types/html/form.input_to_string\nhtml_dsl/types/html/form input_to_string","url":"html_dsl/types/html/form.html#input_to_string"},{"doc":"html_dsl/types/html/form","title":"input_type_to_attribute","content":"pub fn input_type_to_attribute(input_type: InputType) -&gt; String\n A function that converts an input type to the corresponding HTML attribute as a string.\r\n  - `@param` input_type: The input type to convert.\r\n  - `@return`: The corresponding HTML attribute as a string.\r\n @example\r\n \r\n let str = input_type_to_attribute(InputType.Text)\r\n // str == &quot;type=\\&quot;text\\&quot;&quot;\r\n \r\nSynonyms:\nhtml_dsl/types/html/form.input_type_to_attribute\nhtml_dsl/types/html/form input_type_to_attribute","url":"html_dsl/types/html/form.html#input_type_to_attribute"},{"doc":"html_dsl/types/html/form","title":"label","content":"pub fn label(\n  root root: Input,\n  attributes attributes: Option(Attribute),\n  innner inner: String,\n) -&gt; Input\n This creates a string that represents a label element\r\n  - `@param` root: The root of the element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` inner: The child of the element\r\n  - `@returns`: An Input\r\nSynonyms:\nhtml_dsl/types/html/form.label\nhtml_dsl/types/html/form label","url":"html_dsl/types/html/form.html#label"},{"doc":"html_dsl/types/html/form","title":"html_dsl/types/html/form","content":"","url":"html_dsl/types/html/form.html"},{"doc":"html_dsl/types/html/form/select","title":"Selection","content":"pub opaque type Selection\n This is a type that represents an option element\r\n\nSynonyms:\nhtml_dsl/types/html/form/select.Selection\nhtml_dsl/types/html/form/select Selection","url":"html_dsl/types/html/form/select.html#Selection"},{"doc":"html_dsl/types/html/form/select","title":"add","content":"pub fn add(\n  root root: Selection,\n  attributes attributes: Option(Attribute),\n  value value: String,\n  inner inner: String,\n) -&gt; Selection\n This creates a string that represents an option element\r\n  - `@param` root: The root of the option\r\n  - `@param` attributes: The attributes of the option\r\n  - `@param` value: The value of the option\r\n  - `@param` children: The children of the option\r\n  - `@returns`: An Option\r\nSynonyms:\nhtml_dsl/types/html/form/select.add\nhtml_dsl/types/html/form/select add","url":"html_dsl/types/html/form/select.html#add"},{"doc":"html_dsl/types/html/form/select","title":"end","content":"pub fn end(root: Selection) -&gt; Input\n\nSynonyms:\nhtml_dsl/types/html/form/select.end\nhtml_dsl/types/html/form/select end","url":"html_dsl/types/html/form/select.html#end"},{"doc":"html_dsl/types/html/form/select","title":"select","content":"pub fn select(\n  input: Input,\n  attributes attributes: Option(Attribute),\n) -&gt; Selection\n This creates a string that represents a select element\r\n  - `@param` attributes: The attributes of the element\r\n  - `@param` options: The options of the select\r\n  - `@returns`: A string that represents the HTML element\r\nSynonyms:\nhtml_dsl/types/html/form/select.select\nhtml_dsl/types/html/form/select select","url":"html_dsl/types/html/form/select.html#select"},{"doc":"html_dsl/types/html/form/select","title":"html_dsl/types/html/form/select","content":"","url":"html_dsl/types/html/form/select.html"},{"doc":"html_dsl","title":"main","content":"pub fn main() -&gt; Nil\n Example of creating an HTML string\r\nSynonyms:\nhtml_dsl.main\nhtml_dsl main","url":"html_dsl.html#main"},{"doc":"html_dsl","title":"html_dsl","content":"","url":"html_dsl.html"}]);